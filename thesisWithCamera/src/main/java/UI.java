
import com.ibm.watson.developer_cloud.visual_recognition.v3.model.ClassifiedImages;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.border.EtchedBorder;
import javax.swing.filechooser.FileSystemView;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author robindah
 */
public class UI extends javax.swing.JFrame implements MouseListener{

    /**
     * Init figures
     */
    public JLabel text;
    //This will be the amount of result from the classifier, should be a fixed number ideally since the amount of classes wont increase, currently 24 classes 
    public ArrayList<JLabel> JLabels;
    public GridBagLayout g;
    
        
    
    
    public UI() throws IOException {
        //initComponents();
        //ArrayList<ClassifiedObject> urltest = Methods.classifyURL("https://d2lnr5mha7bycj.cloudfront.net/product-image/file/large_91e6ebd6-fb26-4320-bc37-2003de8b54ce.jpg");
        ClassifiedImages test = Methods.classifyURLNoParse("https://d2lnr5mha7bycj.cloudfront.net/product-image/file/large_91e6ebd6-fb26-4320-bc37-2003de8b54ce.jpg");
        ArrayList<ClassifiedObject> urltest = Methods.JSONToArray(test);
        //Gets the number of custom classes
        Long arraysize = test.getCustomClasses();
        ArrayList<String> classes = Methods.getClassifiers();
        JLabels = new ArrayList<>();
        for (int i = 0; i < arraysize; i++) {
            
            ImageIcon  f = new ImageIcon("../watson_images/" + classes.get(i) + ".jpg");
            
            JLabel e = new JLabel(f);
            e.add(new JLabel(urltest.get(i).getName()));
            e.addMouseListener(this);

            JLabels.add(e);
        }
        
        g = new GridBagLayout();
        setLayout(g);
        GridBagConstraints con = new GridBagConstraints();
        
        //
         
        int x_axis = 0;
        int y_axis = 0;
       
        for (int i = 0; i < JLabels.size(); i++) {
            con = new GridBagConstraints();
            con.gridy = y_axis;
            con.gridx = x_axis;
            con.gridwidth = 1;
            con.fill = GridBagConstraints.HORIZONTAL;
            
            g.setConstraints(JLabels.get(i), con);
            add(JLabels.get(i));
            JLabels.get(i).setPreferredSize(new Dimension(200, 200));
            JLabels.get(i).setBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED));
            
            if (x_axis == 5) {
                x_axis = 0;
                y_axis++;
            }else{
                x_axis++;
            }
        }
        
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        pack();
        setVisible(true);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1313, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 840, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new UI().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
        
        
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        
        }

    @Override
    public void mousePressed(MouseEvent e) {
        
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        }

    @Override
    public void mouseEntered(MouseEvent e) {
        //System.out.println(e.getLocationOnScreen());
        }

    @Override
    public void mouseExited(MouseEvent e) {
        }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
