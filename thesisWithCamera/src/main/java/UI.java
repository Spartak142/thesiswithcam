
import com.ibm.watson.developer_cloud.visual_recognition.v3.model.ClassifiedImages;
import java.awt.Button;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.EtchedBorder;

public class UI extends javax.swing.JFrame implements MouseListener {

    /**
     * Init figures
     */
    //This will be the amount of result from the classifier, should be a fixed number ideally since the amount of classes wont increase, currently 24 classes 
    public ArrayList<Square> squares;
    public Dimension screenSize;
    boolean classifyMode;
    public JLabel test;
    private  JLabel noB,yesB, guessingPic;

    public UI() {
        //Gets screen size
        screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        //Here it waits for the image to be taken
        //Closes on exit
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        //Fullscreen
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        //Removes the bars so looks like fullscreen
        setUndecorated(true);
        //To like warp up all components.
        pack();
        //Make it visible
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1313, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 840, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
    }

    //Get an image on some sort
    public void phase1() {
        GridBagLayout g = new GridBagLayout();
        setLayout(g);
        GridBagConstraints con = new GridBagConstraints();
        con = new GridBagConstraints();
        con.gridy = 0;
        con.gridx = 0;
        con.gridwidth = 1;
        con.fill = GridBagConstraints.HORIZONTAL;
        test = new JLabel("Currently taking pictures");
        Font f = new Font("serif", Font.PLAIN, 60);
        test.setFont(f);
        g.setConstraints(test, con);
        //Adds it to the main frame
        add(test);
        setVisible(true);

    }

    
    // Phase 2 to ask user whether the AI guessed correctly
    public void phase2(String watsonGuess, String path) {
        GridBagLayout g = new GridBagLayout();
        setLayout(g);
        GridBagConstraints con = new GridBagConstraints();
        con = new GridBagConstraints();
        con.gridy = 0;
        con.gridx = 0;
        con.gridwidth = 1;
        con.fill = GridBagConstraints.HORIZONTAL;
        try {
            Image imageOfGuess = ImageIO.read(new File("src/main/java/watson_images/" + watsonGuess + ".jpg")).getScaledInstance((int) screenSize.getWidth() / 5, (int) screenSize.getWidth() / 5, Image.SCALE_SMOOTH);
            guessingPic=new JLabel(new ImageIcon(imageOfGuess), SwingConstants.CENTER);
            add(guessingPic);
        } catch (IOException e) {
            e.printStackTrace();
        }

       GridBagConstraints con1 = new GridBagConstraints();
        con1 = new GridBagConstraints();
        con1.gridy = 1;
        con1.gridx = 0;
        con1.gridwidth = 1;
        test.setText("Is this the correct object?");
        Font f = new Font("serif", Font.PLAIN, 60);
        test.setFont(f);
        g.setConstraints(test, con1);

       GridBagConstraints con2 = new GridBagConstraints();
        con2 = new GridBagConstraints();
        con2.gridy = 2;
        con2.gridx = 0;
        con2.gridwidth = 1;
        try {
            Image yes = ImageIO.read(new File("buttons/yes.png")).getScaledInstance((int) screenSize.getWidth() / 9, (int) screenSize.getWidth() / 9, Image.SCALE_SMOOTH);
            yesB = new JLabel(new ImageIcon(yes), SwingConstants.LEFT);
            yesB.addMouseListener(new MouseListener() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    System.out.println("Mouse clicked");
                }

                @Override
                public void mousePressed(MouseEvent e) {
                    System.out.println("Mouse pressed");
                    moveImage(watsonGuess,path);
                    
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                }

                @Override
                public void mouseEntered(MouseEvent e) {
                    //System.out.println(e.getLocationOnScreen());
                }

                @Override
                public void mouseExited(MouseEvent e) {
                }

                
                // If Watson guessed correctly move the file to the appropriate folder for fuTURE
                private void moveImage(String watsonGuess, String path) {
                    String pathToNewPlace= "classes/"+watsonGuess;
                    int numberOfFIlesInTheFolder= new File(pathToNewPlace).listFiles().length;
                    if(numberOfFIlesInTheFolder<40){
                        try {
                            System.out.println("Trying to move the file");
                            Files.move(Paths.get(path), Paths.get(pathToNewPlace+"/"+numberOfFIlesInTheFolder+".jpg"));
                            System.out.println("Move successfull");
                        } catch (IOException ex) {
                            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else{
                        System.out.println("Too many files in the folder");
                    }
                }
            });
            g.setConstraints(yesB, con2);
            add(yesB);
        } catch (IOException e) {
            e.printStackTrace();
        }

        GridBagConstraints con3 = new GridBagConstraints();
        con3 = new GridBagConstraints();
        con3.gridy = 2;
        con3.gridx = 2;
        con3.gridwidth = 1;
        try {
            Image no = ImageIO.read(new File("buttons/no.jpg")).getScaledInstance((int) screenSize.getWidth() / 9, (int) screenSize.getWidth() / 9, Image.SCALE_SMOOTH);
            noB = new JLabel(new ImageIcon(no), SwingConstants.RIGHT);
            noB.addMouseListener(new MouseListener() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    System.out.println("Mouse clicked");
                }

                @Override
                public void mousePressed(MouseEvent e) {
                    System.out.println("Mouse pressed");
                    phase3();
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                }

                @Override
                public void mouseEntered(MouseEvent e) {
                    //System.out.println(e.getLocationOnScreen());
                }

                @Override
                public void mouseExited(MouseEvent e) {
                }

            });
            g.setConstraints(noB, con3);
            add(noB);
        } catch (IOException e) {
            e.printStackTrace();
        }

        //Adds it to the main frame
        setVisible(true);

    }

    //The phase after taking the picture
    public void phase3() {
        remove(noB);
        remove(yesB);
        remove(test);
        remove(guessingPic);
        
        
        ArrayList<String> classes = Methods.getClassifiers();
        int arraysize = classes.size();
        squares = new ArrayList<>();
        for (int i = 0; i < arraysize; i++) {
            //Configuring all the squares
            //Creates a new square
            Square sq = new Square(0, 0, classes.get(i));
            //Adds the name of the class to the square
            //sq.add(new JLabel(urltest.get(i).getName()));
            //Adds a mouselistener for later use like clicking on it.
            sq.addMouseListener(this);
            //This line does not work at school but works at home
            sq.setBackground(new Color(255, 255, 255));
            //This can be done so that each square or something has its own path to the image
            Image image = null;
            try {
                image = ImageIO.read(new File("src/main/java/watson_images/" + classes.get(i) + ".jpg")).getScaledInstance((int) screenSize.getWidth() / 9, (int) screenSize.getWidth() / 9, Image.SCALE_SMOOTH);
            } catch (IOException ex) {
                Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
            }
            sq.add(new JLabel(new ImageIcon(image), SwingConstants.CENTER));
            squares.add(sq);
        }

        GridBagLayout g = new GridBagLayout();
        setLayout(g);
       GridBagConstraints con = new GridBagConstraints();

        //
        int x_axis = 0;
        int y_axis = 0;

        for (int i = 0; i < squares.size(); i++) {
            con = new GridBagConstraints();
            con.gridy = y_axis;
            con.gridx = x_axis;
            con.gridwidth = 1;
            con.fill = GridBagConstraints.HORIZONTAL;

            g.setConstraints(squares.get(i), con);
            add(squares.get(i));
            squares.get(i).setPreferredSize(new Dimension((int) screenSize.getWidth() / 8, (int) screenSize.getWidth() / 8));
            squares.get(i).setBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED));

            if (x_axis == 5) {
                x_axis = 0;
                y_axis++;
            } else {
                x_axis++;
            }
        }
        repaint();
    }

    @Override
    public void mouseClicked(MouseEvent e) {

    }

    @Override
    public void mousePressed(MouseEvent e) {
        //TEMPORARLY just to see that it works
        e.getComponent().setBackground(Color.green);
        //This is the magic
        Object o = e.getSource();
        //Squares.indexOf(o) gives us the object with all values.
        System.out.println(squares.get(squares.indexOf(o)).co);

    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        //System.out.println(e.getLocationOnScreen());
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
